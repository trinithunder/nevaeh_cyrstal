# lib/generators/nevaeh_crystal/templates/task_manager.rb.erb
class NevaehCrystal::TaskManager
  def initialize(signal_service, data_service, analysis_service, response_service, background_processing_service, idea_generation_service, astrology_service)
    @signal_service = signal_service
    @data_service = data_service
    @analysis_service = analysis_service
    @response_service = response_service
    @background_processing_service = background_processing_service
    @idea_generation_service = idea_generation_service
    @astrology_service = astrology_service
    @task_queue = Queue.new
  end

  def process_task(task)
    case task[:type]
    when :transmit_signal
      transmit_signal(task[:data])
    when :store_or_retrieve
      store_or_retrieve(task[:data])
    when :analyze_and_conclude
      analyze_and_conclude(task[:data])
    when :immediate_response
      immediate_response(task[:data])
    when :background_processing
      background_processing(task[:data])
    when :generate_new_idea
      generate_new_idea(task[:data])
    when :apply_astrological_influence
      apply_astrological_influence(task[:data])
    else
      puts "Unknown task type: #{task[:type]}"
    end
  end

  def add_task_to_queue(task)
    @task_queue.push(task)
  end

  def handle_background_tasks
    Thread.new do
      loop do
        break if @task_queue.empty?
        task = @task_queue.pop
        process_task(task)
        simulate_work
      end
    end
  end

  private

  def simulate_work
    sleep(rand(2..4))
  end

  def transmit_signal(data)
    @signal_service.transmit_signal(data)
  end

  def store_or_retrieve(data)
    @data_service.store_or_retrieve(data)
  end

  def analyze_and_conclude(data)
    @analysis_service.analyze_and_conclude(data)
  end

  def immediate_response(data)
    @response_service.immediate_response(data)
  end

  def background_processing(data)
    @background_processing_service.process_background_task(data)
  end

  def generate_new_idea(data)
    @idea_generation_service.generate_new_idea(data)
  end

  def apply_astrological_influence(data)
    @astrology_service.apply_astrological_influence(data)
  end
end
